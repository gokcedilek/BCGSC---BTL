Description of Physlr:
Physlr is a software program that aims to output a mapping of chromosomes or DNA molecules, which can be used for their assembly. 
Physlr uses a dataset of reads (DNA sequences) generated by linked read sequencing, which is a sequencing technology that assigns identifier barcodes to each read of sequenced DNA fragments (fragment = a smaller piece of a large DNA molecule).
The condition for assigning the barcodes is, the reads that come from the same long DNA molecule (molecule = a smaller piece of a whole chromosome), will get the same barcode.
This barcode to molecule mapping enables us to assemble larger pieces of DNA molecules, using first barcode, and then molecule overlap information. 
However, a core challenge is, barcodes are reused for different molecules, and this makes the job a difficult overlap problem to tackle.
The idea for navigating the barcode and molecule overlap graphs is assigning multiple minimizers (explained below) to each barcode, and connecting the barcode nodes in the graph with an edge which is a weight equal to the number of shared minimizers between a pair of barcodes.
A minimizer is a 64 bit integer whose value is determined by a hash function; at least one minimizer is assigned to every read (depending on some parameters) based on the substrings of the read.
Physlr is a modular tool that is composed of multiple stages, and during my Co-op term at the Bioinformatics Technology Lab, the stage of Physlr that I was involved with was filtering outlier barcodes and minimizers, before building barcode and molecule overlap graphs.

Description of the stage of Physlr that I worked on - The edge cases we consider before moving onto building the barcode and molecule overlap graphs, and why we do the barcode and minimizer filtering stages:
Barcode filtering: If a barcode has too few minimizers, that barcode would not give much useful minimizer overlap information with other barcodes that is needed in the barcode overlap graph, so it wouldn't be a very useful information for our graph. Or, if a barcode has too many minimizers, this means that barcode has been assigned to many different molecules; it would show overlap with many other barcodes, and this would make the barcode overlap graph unnecessarily harder/more complicated to resolve.
Minimizer filtering:  If a minimizer is seen only once, it is filtered, because this minimizer is almost certainly generated due to a sequencing error. Or, if a minimizer is seen more than a threshold value, it is also filtered, because this means the read associated with that minimizer is repeated across the genome. Repeat sequences are better exclude from the overlap graphs as much as possible, because the overlaps they lead to might be inaccurate; because even though the sequences belong to different, non-overlapping molecules, they would look like they overlap.

Description of my work for Physlr:
I focused on improving the performance (specifically, time and memory usage) of barcode and minimizer filtering stages of Physlr:
1. I wrote these stages in C++ (I learned C++ with this project, I did not have prior experience with it), by converting from the existing version in Python.
2. I did thorough testing for these stages with various parameters, with various inputs.
3. I did thorough benchmarking for these stages using various data structures (example: map, set, vector, and different implementations of these data structures) to determine the most viable combination of data structures to use.
4. I refactored the code (example: combining parts of the code, eliminating some unnecessary steps)  to enhance the efficiency of the stages.
5. Results for the fly chromosomes (578611152 barcodes to process) and human chromosomes (1047492412 barcodes to process):
|  fly | Time (min) | Memory (GB)  |  
| --- | --- | --- |
|  initial version | 110  |  190.155 |
|  final version |  33 |  146.516 | 

|  human | Time (min) | Memory (kb)  |  
| --- | --- | --- |
| initial version | 401  |  422.805 |
| final version | 90  | 295.633  | 



